import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import PageLayout from "~/components/PageLayout";
import { PostView } from "~/components/PostView";
import { api } from "~/utils/api";

const SinglePostPage: NextPage<{ id: string }> = ({ id }) => {
  const router = useRouter();

  // const postId = router.query.id as string;

  // const profileName = router.query.slug as string;
  const { data } = api.posts.getPostByPostId.useQuery({
    id,
  });

  if (!data) throw new Error("No post found.");

  return (
    <>
      <Head>
        {/* <title>{`${profileName}'s Profile`}</title> */}
        <title>Single Post Page</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <PostView {...data} />
      </PageLayout>
    </>
  );
};

import { generateSSGHelper } from "~/server/helpers/ssgHelper";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper();

  const id = context.params?.id;

  if (typeof id !== "string") throw new Error("No id.");

  await ssg.posts.getPostByPostId.prefetch({ id });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      id,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default SinglePostPage;
